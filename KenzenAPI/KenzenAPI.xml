<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KenzenAPI</name>
    </assembly>
    <members>
        <member name="M:KenzenAPI.Controllers.AdminController.Users">
            <summary>
             Accepts a UserID in the Route URL | Fetches a list of all Users
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.ClientController.Save(KenzenAPI.Classes.Client)">
            <summary>
             Expects a Client object
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.ClientController.Users(System.Int32)">
            <summary>
             Accepts a ClientID and a UserID in the Route URL | Fetches a list of Users by Client
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.ClientController.Teams(System.Int32)">
            <summary>
             Accepts a ClientID and a UserID in the Route URL | Fetches a list of Users by Client
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.MessageController.Send(KenzenAPI.Classes.Message)">
            <summary>
             Expects a Message, sends that JSON to an Azure Queue
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.StatsController.HRList(System.Collections.Generic.List{KenzenAPI.DataClasses.HeartRate})">
            <summary>
             Expects a list of HeartRates
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.StatsController.HRFetch(System.Int32)">
            <summary>
             Expects a Client ID in the URI and returns a list of HeartRates
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.StatsController.HRFetch(System.Int32,System.Int32)">
            <summary>
             Expects a Client ID and a UserID in the URI and returns a list of HeartRates
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.StatsController.TH(KenzenAPI.DataClasses.TemperatureHumidity)">
            <summary>
             Expects a TemperatureHumidity object
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.StatsController.THFetch(System.Int32)">
            <summary>
             Expects a Client ID in the URI and returns a list of TemperatureHumidities
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.StatsController.THFetch(System.Int32,System.Int32)">
            <summary>
             Expects a Client ID and a UserID in the URI and returns a list of TemperatureHumiditys
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.StatsController.ME(KenzenAPI.DataClasses.MaxEnvironmental)">
            <summary>
             Expects a MaxEnvironmental object
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.SystemController.LookupList(System.String)">
            <summary>
             Possible Lookup (list) types fetched are AlertResponse, AlertStage, Clothing, DailyFeedbackAnswer, Environment
             NavigationSource, RecAction, RiskLevel, SunExposure, SystemCheckerAnswer and WorkLevel
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.SystemController.MQFetch">
            <summary>
             Expects a User ID in the URI and returns a list of MedicalQuestionnaire
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.SystemController.MAFetch">
            <summary>
             Expects a User ID in the URI and returns a list of MedicalAnswers
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.SystemController.LookupListTypes">
            <summary>
             Expects a User ID in the URI and returns a list of LookupListTypes
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.Login(KenzenAPI.Classes.Models.Login)">
            <summary>
             Accepts a Login object as JSON | Returns an User object
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.UpdatePassword(KenzenAPI.DataClasses.UserPassword)">
            <summary>
             Accepts a UserID in the Route URL | Updates a User Password for the User ID in the JSON object
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.User(KenzenAPI.DataClasses.User)">
            <summary>
            Accepts a User object as JSON | Returns an ID
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.User(System.Int32)">
            <summary>
             Accepts a UserID in the Route URL | Fetches a User
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.UserRoles(System.Int32,System.Int32)">
            <summary>
             Accepts a UserID in the Route URL | Fetches a list of UserRoles for the UserID in that Program(ID)
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.Heartrates(System.Collections.Generic.List{KenzenAPI.DataClasses.HeartRate})">
            <summary>
             Accepts a List of HeartRates as JSON
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.Heartrates(System.Int32)">
            <summary>
             Accepts a UserID in the Route URL | Fetches a list of HeartRates for the application
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.UserMedicalAnswers(System.Int32,System.Int32)">
            <summary>
             Accepts a UserID in the Route URL | Fetches a list of UserMedicalAnswers 
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.MedicalAnswer(KenzenAPI.DataClasses.MedicalAnswer)">
            <summary>
             Accepts a MedicalAnswer as JSON
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.WorkRests(System.Int32)">
            <summary>
             Accepts a UserID in the Route URL | Fetches a list of WorkRests for the Client
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.WorkRest(KenzenAPI.DataClasses.WorkRest)">
            <summary>
             Accepts a WorkRest as JSON
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.TeamUsers(System.Int32,System.Int32)">
            <summary>
             Accepts a ClientID and a TeamID in the Route URL | Fetches a list of TeamUsers by Team
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.TeamUser(KenzenAPI.Classes.Models.TeamUser)">
            <summary>
             Accepts a TeamUser object | Assigns a User to a Team
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.TeamManagers(System.Int32,System.Int32)">
            <summary>
             Accepts a ClientID and a TeamID in the Route URL | Fetches a list of TeamManagers by Team
            </summary>
        </member>
        <member name="M:KenzenAPI.Controllers.UserController.TeamManager(KenzenAPI.DataClasses.User)">
            <summary>
             Accepts a TeamManager object | Assigns a Manager to a Team
            </summary>
        </member>
        <member name="T:KenzenAPI.Log">
            <summary>
            Logs errors, events
            </summary>
        </member>
        <member name="M:KenzenAPI.Log.LogErr(System.String,System.String,System.String)">
            <summary>
            Due to firewall issues the email part of this function has two hardcoded email values 
            Both mail (IP) server and destination email address must be changed by any new dev
            </summary>
            <param name="Source">The name of the function</param>
            <param name="ErrMsg">The Exc.Message property</param>
            <param name="LogPath">The application's log path</param>
            <returns>false if log writing failed</returns>
        </member>
    </members>
</doc>
