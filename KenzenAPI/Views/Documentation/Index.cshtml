@using Microsoft.AspNetCore.Mvc.ApiExplorer;
@using Newtonsoft.Json;
@using KenzenAPI.DataClasses;
@model IApiDescriptionGroupCollectionProvider

<div id="body" style="font-family:verdana">
    <style>
        .smallsh {
            font-size: smaller;
        }
        .bluebg {
            background-color:lightblue;
        }
        .blueborder {
            border: 1px solid darkblue;
        }
    </style>

    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>ASP.NET Web API Help Page</h1>
            </hgroup>
        </div>
    </section>
    <section class="content-wrapper main-content clear-fix">

        <br />
        <i>NOTE: Each API call following Login expects a valid Bearer Token (returned from the login process) in the Authorization Header of the HttpRequest</i>
        <br />
        <br />
        @foreach (var group in Model.ApiDescriptionGroups.Items)
        {
            <h4>@group.GroupName</h4>
            <ul>
                @foreach (var api in group.Items)
                {
                    <li>
                        <h3 class="bluebg"><label class="blueborder">@api.HttpMethod</label> @api.RelativePath</h3>
                        <blockquote>
                            @if (api.ParameterDescriptions.Count > 0)
                            {
                                <h4><i>Parameters</i></h4>
                                <dl class="dl-horizontal">
                                    @foreach (var parameter in api.ParameterDescriptions)
                                    {
                                        <dt>- Name -</dt>
                                        <dd><b>@parameter.Name</b> [in the @parameter.Source.Id]</dd>
                                        <dt class="smallsh">&nbsp;&nbsp;Type</dt>
                                        <dd class="smallsh">@parameter.Type?.FullName</dd>
                                        @if (parameter.RouteInfo != null)
                                        {
                                            <dt class="smallsh">&nbsp;&nbsp;Constraints</dt>
                                            <dd class="smallsh">@string.Join(",", parameter.RouteInfo.Constraints?.Select(c => c.GetType().Name).ToArray())</dd>
                                            <dt class="smallsh">&nbsp;&nbsp;DefaultValue</dt>
                                            <dd class="smallsh">parameter.RouteInfo.DefaultValue</dd>
                                            <dt class="smallsh">&nbsp;&nbsp;Is Optional</dt>
                                            <dd class="smallsh">@parameter.RouteInfo.IsOptional</dd>
                                        }
                                        if (parameter.Type != null && parameter.Type.FullName.Contains("Classes"))
                                        {
                                            object o = Activator.CreateInstance(parameter.Type);
                                            <dt class="smallsh">&nbsp;&nbsp;JSON Body</dt>
                                            <dd><code>@JsonConvert.SerializeObject(o)</code></dd>
                                        }
                                    }
                                </dl>
                            }
                            else
                            {
                                <i>No parameters</i>
                            }
                        </blockquote>
                    </li>
                }
            </ul>
        }
    </section>
</div>